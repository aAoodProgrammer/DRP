<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd


        http://www.springframework.org/schema/data/jpa 
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
>

    <!--引入我们的db.properties文件 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--配置driver -->
        <property name="driverClass" value="${driverClass}"/>
        <!--配置url -->
        <property name="jdbcUrl" value="${url}"/>
        <!--配置user -->
        <property name="user" value="${user}"/>
        <!--配置password -->
        <property name="password" value="${password}"/>
    </bean>

    <!--配置的是JPA的实现产品的适配器 -->
    <bean id="hibernateJpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

    <!--创建我们的EntityManagerFactory的创建 -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!--注入我们的数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!--注入我们的JPA的实现产品的适配器 -->
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <!--配置的是我们JPA的扫描器 扫描的是Entity类 -->
        <property name="packagesToScan" value="com.drp"/>
        <!--配置的是JPA的实现产品中的其他的配置信息 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.id.new_generator_mappings">false</prop>
            </props>
        </property>
    </bean>

    <!--配置我们的事务 -->
    <bean id="jpaTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--应用我们的事务 -->
    <tx:annotation-driven transaction-manager="jpaTransactionManager"/>

    <!--SpringData的配置 base-package:这个就是扫描的我们的dao的接口所在的地方 我们的dao接口最好写成 实体Repository的名字
        这个包的扫描实际上就是为了能够动态的生成我们的接口的代理类对象 transaction-manager-ref:配置的是我们的事物管理器的引用 entity-manager-factory-ref:配置的是我们的entityFactory工厂的引用 -->
    <jpa:repositories base-package="com.drp"
                      transaction-manager-ref="jpaTransactionManager"
                      entity-manager-factory-ref="entityManagerFactory">
    </jpa:repositories>

    <jpa:repositories base-package="com.drp.repository"
                      repository-impl-postfix="Impl"
                      entity-manager-factory-ref="entityManagerFactory"
                      transaction-manager-ref="jpaTransactionManager">
    </jpa:repositories>

    <!--这里首先配置的是shiro的过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 用户没有通过认证的时候 访问的action 实际上应该访问我们的登陆页面 -->
        <property name="loginUrl" value="/login.action"/>
        <!--这个表示的是用户没有权限的时候自动跳转的页面 -->
        <property name="unauthorizedUrl" value="/refuse.jsp"/>
        <!--注入我们的安全管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!--配置我们RememberMe的过滤器 -->
        <property name="filters">
            <map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </map>
        </property>
        <!--配置的是我们的拦截器 -->
        <property name="filterChainDefinitions">
            <value>
                <!--配置哪些页面只要记住用户名了就可以访问了 -->
                /index.jsp=user
                /first.action=user
                /index1.action=user
                /=user
                <!--授权判断 -->
                /bobo.action=perms[bobo:create]
                /logout.action=logout
                <!--所有页面只有认证通过了之后才能访问 如果是要拦截所有请求的话那么必须卸载最后这个位置否则没效果 -->
                /**=authc
            </value>
        </property>
    </bean>

    <!--配置我们的安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="customRealm"/>
        <!--注入我们的缓存管理 -->
        <property name="cacheManager" ref="cache"/>
        <!--注入我们的session管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!--注入我们的RememberMe的管理器 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!--配置我们的realm -->
    <bean id="customRealm" class="com.drp.realm.CustomRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!--配置的是凭证匹配器 -->
    <bean id="credentialsMatcher"
          class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!--注入的是散列算法的名字 -->
        <property name="hashAlgorithmName" value="md5"/>
        <!--迭代的次数 -->
        <property name="hashIterations" value="1"/>
    </bean>

    <!--配置我们的缓存 -->
    <!--配置我们的缓存管理器 这里不能按照以前的做法直接写类而是要使用Spring中的ehcache来解决这个问题 -->
    <bean id="cache" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager"/>
    </bean>

    <!--配置的是我们Spring中的ehcache的使用 -->
    <bean id="ehCacheManager"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <property name="shared" value="true"/>
    </bean>
    <!--实现session的管理 -->
    <bean id="sessionManager"
          class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="10000000"/>
        <property name="deleteInvalidSessions" value="true"/>
    </bean>

    <!--配置我们remeberMe的功能 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="simpleCookie"/>
    </bean>

    <!--下面注入Cookie -->
    <bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="maxAge" value="2592000"/>
    </bean>

    <!--配置验证表单的名字 -->
    <bean id="formAuthenticationFilter"
          class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="userName"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="servletContext" ref="servletContext"/>
    </bean>

</beans>