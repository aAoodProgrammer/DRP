<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/data/jpa 
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
         http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd"
	default-autowire="byName">

	<!--引入我们的db.properties文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!--配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!--配置driver -->
		<property name="driverClass" value="${driverClass}"></property>
		<!--配置url -->
		<property name="jdbcUrl" value="${url}"></property>
		<!--配置user -->
		<property name="user" value="${user}"></property>
		<!--配置password -->
		<property name="password" value="${password}"></property>
	</bean>

	<!--配置的是JPA的实现产品的适配器 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>

	<!--创建我们的EntityManagerFactory的创建 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!--注入我们的数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!--注入我们的JPA的实现产品的适配器 -->
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"></property>
		<!--配置的是我们JPA的扫描器 扫描的是Entity类 -->
		<property name="packagesToScan" value="com.drp"></property>
		<!--配置的是JPA的实现产品中的其他的配置信息 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
			</props>
		</property>
	</bean>

	<!--配置我们的事务 -->
	<bean id="jpaTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>

	<!--应用我们的事务 -->
	<tx:annotation-driven transaction-manager="jpaTransactionManager" />

	<!--SpringData的配置 base-package:这个就是扫描的我们的dao的接口所在的地方 我们的dao接口最好写成 实体Repository的名字 
		这个包的扫描实际上就是为了能够动态的生成我们的接口的代理类对象 transaction-manager-ref:配置的是我们的事物管理器的引用 entity-manager-factory-ref:配置的是我们的entityFactory工厂的引用 -->
	<jpa:repositories base-package="com.drp"
		transaction-manager-ref="jpaTransactionManager"
		entity-manager-factory-ref="entityManagerFactory">
	</jpa:repositories>

	<jpa:repositories base-package="com.drp.repository"
		repository-impl-postfix="Impl"
		factory-class="com.drp.utils.BaseRepositoryFactoryBean"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="jpaTransactionManager">
	</jpa:repositories>

</beans>